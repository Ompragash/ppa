---
name: ansible
on:
  workflow_dispatch:
    inputs:
      DEB_ARCH:
        required: true
        default: amd64
      DEB_DIST:
        required: true
      DEB_RELEASE:
        required: true
        default: 1ppa
      DEB_VERSION:
        required: true
      LAUNCHPAD_PROJECT:
        required: true
      LAUNCHPAD_PPA:
        required: true
jobs:
  build_ansible:
    name: Build ansible
    runs-on: ubuntu-20.04
    env:
      DEB_NAME: ansible
      DEB_ARCH: ${{ github.event.inputs.DEB_ARCH }}
      DEB_DIST: ${{ github.event.inputs.DEB_DIST }}
      DEB_RELEASE: ${{ github.event.inputs.DEB_RELEASE }}
      DEB_VERSION: ${{ github.event.inputs.DEB_VERSION }}
      LAUNCHPAD_PROJECT: ${{ github.event.inputs.LAUNCHPAD_PROJECT }}
      LAUNCHPAD_PPA: ${{ github.event.inputs.LAUNCHPAD_PPA }}
    steps:
      - name: checkout branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: run the setup action
        uses: ./.github/actions
        with:
          LAUNCHPAD_PROJECT: ${{ github.event.inputs.LAUNCHPAD_PROJECT }}
          LAUNCHPAD_PPA: ${{ github.event.inputs.LAUNCHPAD_PPA }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_PASSPHRASE: ${{ secrets.SIGNING_PASSPHRASE }}
          SIGNING_OWNERTRUST: ${{ secrets.SIGNING_OWNERTRUST }}

      - name: build
        env:
          DEBSIGN_KEYID: ${{ secrets.DEBSIGN_KEYID }}
          DEBSIGN_PROGRAM: gpg --pinentry-mode loopback --passphrase-file ${HOME}/signing.passphrase
          OFFICIAL: yes
          TARBALL_BASE_URL: https://pypi.python.org/packages/source
        run: |
          echo "DEB_NAME=${DEB_NAME}"
          echo "DEB_ARCH=${DEB_ARCH}"
          echo "DEB_DIST=${DEB_DIST}"
          echo "DEB_RELEASE=${DEB_RELEASE}"
          echo "DEB_VERSION=${DEB_VERSION}"
          echo "LAUNCHPAD_PROJECT=${LAUNCHPAD_PROJECT}"
          echo "LAUNCHPAD_PPA=${LAUNCHPAD_PPA}"

          # handle different release types better in the changelog
          DEB_VERSION_EXTRA=$(echo "${DEB_VERSION}" | grep -Po '[a-z]+.*' || true)

          if [[ -n "${DEB_VERSION_EXTRA}" ]]; then
            DEB_VERSION_BASE=$(echo "${DEB_VERSION}" | grep -Po '^[\d+\.]+')
            export DEB_CHANGELOG_VERSION="${DEB_VERSION_BASE}"~"${DEB_VERSION_EXTRA}"
          else
            export DEB_CHANGELOG_VERSION="${DEB_VERSION}"
          fi

          sudo apt -y install make python python-packaging python-jinja2 python-yaml python-docutils python-setuptools devscripts cdbs debhelper dh-python

          mkdir -p "${HOME}"/"${DEB_NAME}" && cd "$_" || exit
          rm -rf "${DEB_NAME}"-"${DEB_VERSION}"*
          wget "${TARBALL_BASE_URL}"/"${DEB_NAME:0:1}"/"${DEB_NAME}"/"${DEB_NAME}"-"${DEB_VERSION}".tar.gz
          tar -xzf "${DEB_NAME}"-"${DEB_VERSION}".tar.gz
          cd "${DEB_NAME}"-"${DEB_VERSION}" || exit

          # add DEBSIGN_PROGRAM option for non-interactive signing
          sed -Ei 's/(\s+DEBUILD_OPTS \+= -k\$\(DEBSIGN_KEYID\))$/\1 -p"$(DEBSIGN_PROGRAM)"/g' Makefile
          # change contact in debian/changelog to Ansible Community Builds
          sed -i 's/Ansible, Inc. <info@ansible.com>/Ansible Community Builds <ansible-community-builds@redhat.com>/g' packaging/debian/changelog
          # change contact in debian/control to Ansible Community Builds
          sed -i 's/^Maintainer: Ansible, Inc. <info@ansible.com>/Maintainer: Ansible Community Builds <ansible-community-builds@redhat.com>\nUploaders: Ansible GitHub Actions <ansible-gha@redhat.com>/g' packaging/debian/control

          time DEB_PPA="${LAUNCHPAD_PPA}" DEB_VERSION="${DEB_CHANGELOG_VERSION}" make deb-src-upload




